@import url("https://fonts.googleapis.com/css?family=Work+Sans:400|Space+Mono:400");
/* Define the ROOT SCOPE for the varialbes it will contain */
:root {
  /* Color Themes */
  --green: #00ebb3;
  --red: #ff3b5b;
  --yellow: #fdf14f;
  --black: #1b2a45;
  --darkBlue: #00214d;
  --grey: #bfbfbf;
  --lightGrey: #f2f4f6;
  --white: #fcfcfc;

  /* Define Color Intentions */
  --primary: var(--green);
  --danger: var(--red);
  --background: var(--lightGrey);
  --textColor: var(--black);
  --lineColor: var(--grey);

  /* Styles */
  --line: solid 1px var(--lineColor);

  /* Type */
  --headingFont: "Space Mono", monospace;
  --bodyFont: "Work Sans", sans-serif;
  --baseFontSize: 100%;
  --h1: 3.052rem;
  --h2: 2.441rem;
  --h3: 1.953rem;
  --h4: 1.563rem;
  --h5: 1.25rem;
  --smallText: 0.9em;

  /*  Elevation */
  --level-1: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
  --level-2: 0 4px 6px -1px rgba(0, 0, 0, 0.1),
    0 2px 4px -1px rgba(0, 0, 0, 0.06);
  --level-3: 0 10px 15px -3px rgba(0, 0, 0, 0.1),
    0 4px 6px -2px rgba(0, 0, 0, 0.05);
  --level-4: 0 20px 25px -5px rgba(0, 0, 0, 0.1),
    0 10px 10px -5px rgba(0, 0, 0, 0.04);
}

/* FROM  https://type-scale.com/  */

html {
  font-size: var(--baseFontSize);
} /*16px*/

body {
  font-family: var(--bodyFont);
  font-weight: 400;
  line-height: 1.65;
  padding-bottom: 200px;
  background: var(--background);
  color: var(--textColor);
}

p {
  margin-bottom: 1.15rem;
  max-width: 40em;
}

p a,
blockquote a {
  color: var(--black);
  text-decoration: none;
  border-bottom: solid 2px var(--primary);
}

h1,
h2,
h3,
h4,
h5 {
  margin: 3rem 0 1.38rem;
  font-family: var(--headingFont);
  font-weight: 400;
  line-height: 1.15;
}

h1 {
  margin-top: 0;
  font-size: var(--h1);
}

h2 {
  font-size: var(--h2);
}

h3 {
  font-size: var(--h3);
}

h4 {
  font-size: var(--h4);
}

h5 {
  font-size: var(--h5);
}

small,
.text_small {
  font-size: var(--smallText);
}

/* END Type-Scale */

.dark {
  --background: var(--black);
  --textColor: var(--lightGrey);
}

blockquote {
  margin: 1em;
  padding: 2em;
  background: white;
  box-shadow: var(--level-3);
}

label {
  display: block;
  font-size: var(--smallText);
}

input,
textarea {
  border: var(--line);
  border-radius: 4px;
  padding: 3px 5px;
}

textarea {
  width: 100%;
  height: 5rem;
}

::placeholder {
  color: var(--grey);
}

select {
  border: var(--line);
}

hr {
  border-top: var(--line);
}

/* We're going to set some 'super' properties for all of our buttons using variables */
/* By doing this we can easily detail any subsequent types/sub-sets of buttons in our app */
/* Doing this 'element-theming' also makes the code far more readable/symantic */
button {
  --buttonColor: var(--primary);

  appearance: none;
  background-color: var(--buttonColor);
  color: var(--textColor);
  border: none;
  border-radius: 10px;
  padding: 5px 25px;
  box-shadow: var(--level-1);
  transition: 0.35s ease-in-out box-shadow;
}

button:hover {
  box-shadow: var(--level-2);
}

/* Attribute for button.. disabled in this case */
button[disabled] {
  opacity: 0.4;
}

/* Instead of making a 'super' class of 'cancel', make your styling more specific to avoid potential
    conflicts with classes later on .. in this case scope this to be button element cancels. We
    do the same thing for the 'small' class of buttons below it */

button.cancel {
  --buttonColor: var(--danger);
  --textColor: var(--white);
}

button.small {
  font-size: var(--smallText);
}

/* Layout Components */

.layout {
  margin: 0 auto;
  width: 95%;
}

.grid {
  --gridCols: 2;
  /* We're setting display to block to work in concert with our main media query at bottom of sheet
     This will default any mobile screens to block so that everything goes in it's own block/single column */
  display: block;
  grid-template-columns: repeat(var(--gridCols), 1fr);
}

.cols-3 {
  --gridCols: 3;
}

.cols-4 {
  --gridCols: 4;
}

.flex {
  --justifyContent: space-between;
  /* We're setting display to block to work in concert with our main media query at bottom of sheet 
     This will default any mobile screens to block so that everything goes in it's own block/single column */
  display: block;
  justify-content: var(--justifyContent);
}

.flex-around {
  --justifyContent: space-around;
}

.flex-center {
  --justifyContent: center;
}

/*  Media queries section moved to bottom of stylesheet because 
    css-specificity of these overrides
    MUST occur AFTER the hierarchical definition or 'super' */
@media only screen and (min-width: 550px) {
  /* Here we're going to set overrides for our variables and other classes based on media queries. Here 
     for anything larger than mobile (>550px) */
  :root {
    --baseFontSize: 112.5%;
  }
  .grid {
    display: grid;
  }
  .flex {
    display: flex;
  }
}
